This deletes all nodes and all relationships in the whole database
MATCH (n)
OPTIONAL MATCH (n)-[r]-()
DELETE n,r

This is the same as above, just for a specific node type
MATCH (n:`ContentPage`)
OPTIONAL MATCH (n)-[r]-()
DELETE r,n

Create index on a label:
CREATE INDEX ON :Person(name)

Drop index on a label:
DROP INDEX ON :Person(name)

Create uniqueness constraint:
CREATE CONSTRAINT ON (book:Book) ASSERT book.isbn IS UNIQUE

Drop uniqueness constraint:
DROP CONSTRAINT ON (book:Book) ASSERT book.isbn IS UNIQUE

For listing all indexes and constraints in neo4j-browser, following command is useful:
:schema

List indices and constraints for specific label with:
:schema ls -l :YourLabel

-----

Some help when developing @Query()
MATCH (a)-[:`LOCATION_AT`]->(b) WHERE b.objectId ='6f0b11f4-ea07-40fb-ac7c-824f45445a18' RETURN a,b
start n=node:__types__(className="com.example.MyObject") where n.property1 = {0}, n.property2 = {1} return n
MATCH (userP)-[:`LOCATION_AT`]->(county) WHERE county.objectId = '6f0b11f4-ea07-40fb-ac7c-824f45445a18' RETURN userP

--
Reindex:
If you configure it after the fact you have to re-set the properties with a cypher statement like this:

MATCH (n:`UserProfile`)
WHERE has(n.profileLinkName)
SET n.profileLinkName=n.profileLinkName

If you already have many nodes in your database you have to batch it manually to cater for the transaction size limits, like this (increase SKIP by 50000 from 0 to until the query returns zero):

MATCH (n)
WHERE has(n.title)
SKIP 150000 LIMIT 50000
SET n.title=n.title
RETURN COUNT(*)
--

--
(http://refcardz.dzone.com/refcardz/core-spring-data)
Logical keyword	Keyword expressions
AFTER	After, IsAfter (date types only)
BEFORE	Before, IsBefore (date types only)
BETWEEN	Between, IsBetween (date and numeric types only)
CONTAINING	Containing, IsContaining, Contains (String or collection types only)
ENDING_WITH	EndingWith, IsEndingWith, EndsWith (String types only)
EXISTS	Exists
FALSE	False (boolean properties only)
GREATER_THAN	GreaterThan, IsGreaterThan (comparable types only)
GREATER_THAN_EQUALS	GreaterThanEqual, IsGreaterThanEqual (comp√ºarable types only)
IN	In, IsIn (expects collection or array parameter)
IS	Is, Equals, (or no keyword at all)
IS_NOT_NULL	NotNull, IsNotNull
IS_NULL	Null, IsNull
LESS_THAN	LessThan, IsLessThan (comparable types)
LESS_THAN_GREATER	LessThanGreater, IsLessThanGreater (comparable types only)
LIKE	Like, IsLike (expects the store-specific like syntax, prefer CONTAINING, STARTS_WITH, ENDS_WITH)
NOT	Not, IsNot (boolean types only)
NOT_IN	NotIn, IsNotIn (expects collection or array parameter)
NOT_LIKE	NotLike, IsNotLike
STARTING_WITH	StartingWith, IsStartingWith, StartsWith (String types only)
TRUE	True, IsTrue (boolean types only)